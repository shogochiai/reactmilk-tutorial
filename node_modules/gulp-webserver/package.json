{
  "name": "gulp-webserver",
  "version": "0.9.0",
  "description": "Gulp plugin to run a local webserver with LiveReload",
  "main": "src/index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/schickling/gulp-webserver.git"
  },
  "keywords": [
    "gulpplugin",
    "webserver",
    "connect",
    "livereload"
  ],
  "author": {
    "name": "Johannes Schickling",
    "email": "schickling.j@gmail.com",
    "url": "https://github.com/schickling"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/schickling/gulp-webserver/issues"
  },
  "homepage": "https://github.com/schickling/gulp-webserver",
  "devDependencies": {
    "mocha": "^1.20.1",
    "supertest": "^0.13.0"
  },
  "dependencies": {
    "connect": "^3.0.1",
    "connect-livereload": "^0.4.0",
    "gulp-util": "^2.2.19",
    "isarray": "0.0.1",
    "node.extend": "^1.0.10",
    "open": "^0.0.5",
    "proxy-middleware": "^0.5.0",
    "serve-index": "^1.1.4",
    "serve-static": "^1.3.0",
    "through2": "^0.5.1",
    "tiny-lr": "0.1.4",
    "watch": "^0.11.0"
  },
  "readme": "gulp-webserver [![Build Status](http://img.shields.io/travis/schickling/gulp-webserver.svg?style=flat)](https://travis-ci.org/schickling/gulp-webserver) [![](http://img.shields.io/npm/dm/gulp-webserver.svg?style=flat)](https://www.npmjs.org/package/gulp-webserver) [![](http://img.shields.io/npm/v/gulp-webserver.svg?style=flat)](https://www.npmjs.org/package/gulp-webserver)\n==============\n\n> Streaming gulp plugin to run a local webserver with LiveReload\n\n##### Hint: This is a rewrite of [gulp-connect](https://github.com/AveVlad/gulp-connect/)\n\n## Install\n\n```sh\n$ npm install --save-dev gulp-webserver\n```\n\n## Usage\n\nThe `gulp.src('root')` parameter is the root directory of the webserver. Multiple directories are possible.\n\n```js\nvar gulp = require('gulp');\nvar webserver = require('gulp-webserver');\n\ngulp.task('webserver', function() {\n  gulp.src('app')\n    .pipe(webserver({\n      livereload: true,\n      directoryListing: true,\n      open: true\n    }));\n});\n```\n\n## Options\n\nKey | Type | Default | Description |\n--- | --- | --- | --- |\n`host` | String | `localhost` | hostname of the webserver\n`port` | Number | `8000` | port of the webserver\n`livereload` | Boolean/Object | `false` | whether to use livereload. For advanced options, provide an object. You can use the 'port' property to set a custom live reload port and the `filter` function to filter out files to watch. The object also needs to set `enable` property to true (e.g. `enable: true`) in order to activate the livereload mode. It is off by default.\n`directoryListing` | Boolean/Object | `false` | whether to display a directory listing. For advanced options, provide an object with the 'enable' property set to true. You can use the 'path' property to set a custom path or the 'options' property to set custom [serve-index](https://github.com/expressjs/serve-index) options.\n`fallback` | String | `undefined` | file to fall back to (relative to webserver root)\n`open` | Boolean/String | `false` | open the localhost server in the browser. By providing a String you can specify the path to open (for complete path, use the complete url `http://my-server:8080/public/`) .\n`https` | Boolean/Object | `false` | whether to use https or not. By default, `gulp-webserver` provides you with a development certificate but you remain free to specify a path for your key and certificate by providing an object like this one: `{key: 'path/to/key.pem', cert: 'path/to/cert.pem'}`.\n`middleware` | Function/Array | `[]` | a connect middleware function or a list of middleware functions\n`proxies` | Array | `[]`| a list of proxy objects.  Each proxy object can be specified by `{source: '/abc', target: 'http://localhost:8080/abc', options: {headers: {'ABC_HEADER': 'abc'}}}`.\n\n## FAQ\n\n#### Why can't I reach the server from the network?\n\n**Solution**: Set `0.0.0.0` as `host` option.\n\n#### How can I use `html5Mode` for my single page app with this plugin?\n\n**Solution**: Set the `index.html` of your application as `fallback` option. For example:\n\n```js\ngulp.task('webserver', function() {\n  gulp.src('app')\n    .pipe(webserver({\n      fallback: 'index.html'\n    }));\n});\n```\n\n#### How can I pass a custom filter to livereload?\n\n**Solution**: Set `enable: true` and provide filter function in `filter:` property of the livereload object. For example:\n\n```js\ngulp.task('webserver', function() {\n  gulp.src('app')\n    .pipe(webserver({\n      livereload: {\n        enable: true, // need this set to true to enable livereload\n        filter: function(fileName) {\n          if (fileName.match(/.map$/)) { // exclude all source maps from livereload\n            return false;\n          } else {\n            return true;\n          }\n        }\n      }\n    }));\n});\n```\n\n#### How can I kill the running server?\n\n**Solution**: Either by pressing `Ctrl + C` or programmatically like in this example:\n\n```js\nvar stream = gulp.src('app').pipe(webserver());\nstream.emit('kill');\n```\n\n## License\n\n[MIT License](http://opensource.org/licenses/MIT)\n",
  "readmeFilename": "README.md",
  "_id": "gulp-webserver@0.9.0",
  "_from": "gulp-webserver@"
}
